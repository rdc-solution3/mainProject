(function (win, ysp) {
  ysp.runtime.Model.extendLoadingModel({
    getData_control0_s2ODpT: function (elem) {
      if (elem) {
        var labels = [];var values = [];$(elem).children('tbody').children('tr').each(function (trIdx, tr) {
          labels.push($(tr).children('th').text().trim());var inputVal = $(tr).children('td').children('input').val().trim();var __ErrorMessage = $(tr).children('td').children('li').text();values.push({ inputVal: inputVal, __ErrorMessage: __ErrorMessage });
        });return { labels: labels, values: values };
      } else {
        return null;
      }
    },
    doAction_uiControl0_FTeyrT: function (data, elem) {
      if (data.eventType == 'handleInputChange') {
        var dataCustom = data.dataCustom;var input = $(elem).children('tbody').children('tr').eq(dataCustom.index).children('td').children('input')[0];
        input.value = dataCustom.value;input.dispatchEvent(new Event('change'));
      } else if (data.eventType == 'handleBtnClick') {
        var img = elem.parentElement.querySelector('.btnlan>img');img.click();
      }
    },
    getTemplate_uiControl0_FTeyrT: function () {
      var selfTemplate = 'export default class extends React.Component{\n  handleBtnClick () {\n    this.props.customHandler({\n      eventType: \'handleBtnClick\'\n    })\n  }\n  handleInputChange (e) {\n    this.props.customHandler({\n      data: {\n        value: e.target.value,\n        index: e.target.dataset.index\n      },\n      eventType: \'handleInputChange\'\n    })\n  }\n  render () {\n    var data = this.props.customData;\n    if (data) {\n      return <div className=\'changePwdCon\'>\n        <p className="actionMessage">\u5BC6\u7801\u5DF2\u8FC7\u671F\uFF0C\u8BF7\u4FEE\u6539\u5BC6\u7801\uFF01</p>\n        <ul onBlur={(e) => { this.handleInputChange(e) }}>\n\t\t\t\t\t{\n            data.labels.map( (label, labelIdx) => {\n              return <li>\n              \t<label>\n                \t<b>{label}</b>\n                \t<AInput value={data.values[labelIdx].inputVal} data-index={labelIdx} type=\'password\'/>\n                </label>\n                {\n                  data.values[labelIdx].__ErrorMessage && <p className=\'errorMessage\' style={{\'text-align\': labelIdx == 1 ? \'left\' : \'right\'}}>{data.values[labelIdx].__ErrorMessage}</p>\n                }\n              </li>\n            })\n          }\n        </ul>\n        <button onClick={() => {this.handleBtnClick() }}>\u4FDD\u5B58</button>\n      </div>\n    } else {\n      return null;\n    }\n  }\n}';
      return '\'use strict\';\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _class = function (_React$Component) {\n  _inherits(_class, _React$Component);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n  }\n\n  _createClass(_class, [{\n    key: \'handleBtnClick\',\n    value: function handleBtnClick() {\n      this.props.customHandler({\n        eventType: \'handleBtnClick\'\n      });\n    }\n  }, {\n    key: \'handleInputChange\',\n    value: function handleInputChange(e) {\n      this.props.customHandler({\n        data: {\n          value: e.target.value,\n          index: e.target.dataset.index\n        },\n        eventType: \'handleInputChange\'\n      });\n    }\n  }, {\n    key: \'render\',\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.props.customData;\n      if (data) {\n        return React.createElement(\n          \'div\',\n          { className: \'changePwdCon\' },\n          React.createElement(\n            \'p\',\n            { className: \'actionMessage\' },\n            \'\\u5BC6\\u7801\\u5DF2\\u8FC7\\u671F\\uFF0C\\u8BF7\\u4FEE\\u6539\\u5BC6\\u7801\\uFF01\'\n          ),\n          React.createElement(\n            \'ul\',\n            { onBlur: function onBlur(e) {\n                _this2.handleInputChange(e);\n              } },\n            data.labels.map(function (label, labelIdx) {\n              return React.createElement(\n                \'li\',\n                null,\n                React.createElement(\n                  \'label\',\n                  null,\n                  React.createElement(\n                    \'b\',\n                    null,\n                    label\n                  ),\n                  React.createElement(AInput, { value: data.values[labelIdx].inputVal, \'data-index\': labelIdx, type: \'password\' })\n                ),\n                data.values[labelIdx].__ErrorMessage && React.createElement(\n                  \'p\',\n                  { className: \'errorMessage\', style: { \'text-align\': labelIdx == 1 ? \'left\' : \'right\' } },\n                  data.values[labelIdx].__ErrorMessage\n                )\n              );\n            })\n          ),\n          React.createElement(\n            \'button\',\n            { onClick: function onClick() {\n                _this2.handleBtnClick();\n              } },\n            \'\\u4FDD\\u5B58\'\n          )\n        );\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return _class;\n}(React.Component);\n\nexports.default = _class;';
    }
  }, "changePwd");
})(window, ysp);